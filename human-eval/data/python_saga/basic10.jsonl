{"task_id":"PythonSaga/1", "prompt":"\nfrom typing import List\n\ndef split_big_bag(big_bag: List[int])->bool:\n    \"\"\"i have one big bag in which there are multiple small bags fill with sand. bag of each small bag is different from each other.\n        i want to split the big bad into 2 medium bags, such that avergae weight of each medium bag is same.\n        Take input from user and return True if it is possible to split the big bag into 2 medium bags, else return False.\n        Input: big_bag = [1,2,3,4,5,6,7,8]\n        Output: true\n        Input: big_bag = [3,1]\n        Output: false\"\"\"\n", "entry_point": "split_big_bag", "canonical_solution":"\ntotal_weight = sum(big_bag)\n# Check if the total weight is even\nif total_weight % 2 != 0:\n    return False\n\ntarget_weight = total_weight // 2\n\n# Create a 2D array to store whether it's possible to achieve a certain weight with the given bags\ndp = [[False] * (target_weight + 1) for _ in range(len(big_bag) + 1)]\n\n# Base case: If the target weight is 0, it's always possible (by not selecting any bag)\nfor i in range(len(big_bag) + 1):\n    dp[i][0] = True\n\nfor i in range(1, len(big_bag) + 1):\n    for j in range(1, target_weight + 1):\n        # If the current bag weight is greater than the target weight, skip it\n        if big_bag[i - 1] > j:\n            dp[i][j] = dp[i - 1][j]\n        else:\n            # Either include or exclude the current bag to achieve the target weight\n            dp[i][j] = dp[i - 1][j] or dp[i - 1][j - big_bag[i - 1]]\n\nreturn dp[len(big_bag)][target_weight]", "test": "METADATA = {\n    'author': 'ay',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([0]) == True\n    assert candidate([5,2,3]) == True\n    assert candidate([8]) == False\n    assert candidate([1 2 3 4 5 6]) == False"}
{"task_id":"PythonSaga/3", "prompt":"\nfrom typing import List\n\ndef is_boomarang(points: List[List[int]]) -> bool:\n    \"\"\"Check if the 3 points form a boomerang.\n    A boomerang is a set of 3 points that are all distinct and not in a straight line.\n\n    Take input from the user and return True if the 3 points are a boomerang and False if not.\n\n    Input: [[1,1],[2,3],[3,2]]\n    Output: True\n    Input: [[1,1],[2,2],[3,3]]\n    Output: False\n    \"\"\"\n    # Your implementation here\n    pass", "entry_point": "is_boomarang", "canonical_solution":"\n# Ensure there are exactly 3 points\nif len(points) != 3:\n    return False\n\n# Extract coordinates of the three points\nx1, y1 = points[0]\nx2, y2 = points[1]\nx3, y3 = points[2]\n\n# Check if the points are distinct\nif (x1, y1) == (x2, y2) or (x1, y1) == (x3, y3) or (x2, y2) == (x3, y3):\n    return False\n\n# Check if the points are not in a straight line\nif (x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)) != 0:\n    return True\n\nreturn False", "test": "\nMETADATA = {\n    'author': 'ay',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate([[1, 1], [2, 3], [3, 2]]) == True\n    assert candidate([[1, 1], [2, 2], [3, 3]]) == False\n    assert candidate([[-1, -1], [0, 0], [1, 1]]) == False\n    assert candidate([[0, 0], [1, 2], [3, 4]]) == True\n    assert candidate([[0, 0], [1, 2]]) == False"}
{"task_id":"PythonSaga/16", "prompt":"\nfrom typing import List\n\ndef filter_numbers(x: int, numbers: List[int]) -> List[int]:\n    \"\"\"\n    Filter all numbers in a list of numbers whose bitwise xor with the given value x is equal to 4 with the help of filter() in Python.\n    Take value x and list of numbers as input from the user.\n    input: 5, [1, 2, 3, 4, 5, 6, 7]\n    output: [1]\n    input: 5, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    output: [1, 9]\n    \"\"\"", "entry_point": "filter_numbers", "canonical_solution":"\nfiltered_numbers = list(filter(lambda num: num ^ x == 4, numbers))\nreturn filtered_numbers", "test": "METADATA = {\n    'author': 'ay',\n    'dataset': 'test'\n}\n\ndef check(candidate):\n    assert candidate(5, [1, 2, 3, 4, 5, 6, 7]) == [1]\n    assert candidate(3, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [7]\n    assert candidate(2, [3, 6, 9, 12, 15, 18]) == [6]\n    assert candidate(6, [0, 2, 4, 6, 8, 10]) == [2]"}
{"task_id":"PythonSaga/21", "prompt":"from typing import List\ndef class_dict(teacher: List[str], student: List[str]) -> dict:\n    \"\"\"let's say I have to maintain dictionary for class.\n    here first key will be class name and value will be whether it's teacher or student.\n    if it is student value will be name of student and a key marks will be there which will have marks of student.\n    if it is teacher value will be name of teacher and a key subject will be there which will have subject of teacher.\n    it will be nested dictionary.\n    example: {'class1':{ 'teacher': {'name': 'abc', 'subject': 'maths'}, 'student': {'name': 'xyz', 'marks': {'maths': 90, 'science': 80}, 'name': 'pqr', 'marks': {'maths': 80, 'science': 90}}}}\n    Input: class name, teacher/student, name, subject/marks, subject/marks\n    Output: dictionary\n    Take input from user and return the dictionary. Input can be in form of list one for teacher and one for student with their respective details.\n    Example:\n    Input: ['class1', 'teacher', 'abc', 'maths'], ['class1', 'student', 'xyz', 'maths', 90, 'science', 80]\n    Output: {'class1':{ 'teacher': {'name': 'abc', 'subject': 'maths'}, 'student': {'name': 'xyz', 'marks': {'maths': 90, 'science': 80}}}}\n    Input: ['class1', 'teacher', 'xyz', 'maths'], ['class1', 'student', 'abc', 'maths', 90, 'science', 80]\n    Output: {'class1':{ 'teacher': {'name': 'xyz', 'subject': 'maths'}, 'student': {'name': 'abc', 'marks': {'maths': 90, 'science': 80}}}}\"\"\"", "entry_point": "class_dict", "canonical_solution":"class_data = {}\n\nfor t in teacher:\n    class_name, role, name, subject = t[0], t[1], t[2], t[3]\n    if class_name not in class_data:\n        class_data[class_name] = {'teacher': {'name': '', 'subject': ''}, 'student': {}}\n\n    if role == 'teacher':\n        class_data[class_name]['teacher']['name'] = name\n        class_data[class_name]['teacher']['subject'] = subject\n\nfor s in student:\n    class_name, role, name, *marks = s\n    marks_dict = {marks[i]: marks[i + 1] for i in range(0, len(marks), 2)}\n\n    if class_name not in class_data:\n        class_data[class_name] = {'teacher': {'name': '', 'subject': ''}, 'student': {}}\n\n    if role == 'student':\n        class_data[class_name]['student'][name] = {'marks': marks_dict}\n\nreturn class_data", "test": "METADATA = {'author': 'ay', 'dataset': 'test'}\n\ndef check(candidate):\n    teacher_data_1 = [['class1', 'teacher', 'abc', 'maths']]\n    student_data_1 = [['class1', 'student', 'xyz', 'maths', 90, 'science', 80]]\n    assert candidate(teacher_data_1, student_data_1) == {'class1': {'teacher': {'name': 'abc', 'subject': 'maths'}, 'student': {'xyz': {'marks': {'maths': 90, 'science': 80}}}}}\n\n    teacher_data_2 = [['class1', 'teacher', 'xyz', 'maths']]\n    student_data_2 = [['class1', 'student', 'abc', 'maths', 90, 'science', 80]]\n    assert candidate(teacher_data_2, student_data_2) == {'class1': {'teacher': {'name': 'xyz', 'subject': 'maths'}, 'student': {'abc': {'marks': {'maths': 90, 'science': 80}}}}}\n\n    teacher_data_3 = [['class2', 'teacher', 'def', 'history']]\n    student_data_3 = [['class2', 'student', 'uvw', 'history', 95, 'geography', 85]]\n    assert candidate(teacher_data_3, student_data_3) == {'class2': {'teacher': {'name': 'def', 'subject': 'history'}, 'student': {'uvw': {'marks': {'history': 95, 'geography': 85}}}}}\n\n    teacher_data_4 = [['class3', 'teacher', 'ghi', 'english'], ['class3', 'teacher', 'jkl', 'physics']]\n    student_data_4 = [['class3', 'student', 'mno', 'english', 92, 'physics', 88]]\n    assert candidate(teacher_data_4, student_data_4) == {'class3': {'teacher': {'name': 'jkl', 'subject': 'physics'}, 'student': {'mno': {'marks': {'english': 92, 'physics': 88}}}}}"}
{"task_id":"PythonSaga/22", "prompt":"from typing import Tuple,Optional\ndef new_sum(nested_tuple: Tuple[int, Optional[Tuple]]) -> int:\n    \"\"\"let's say I have a very bad habit of not using comments and I wrote something that my friend says is nested tuple.\n    I have written a something whick looks like this: (5, (6, (1, (9, (10, None))))))\n    I want to do the following with each value, value1 + value2 - value3 + value4 - value5 and soo on.\n    example: 5 + 6 - 1 + 9 - 10 = 9\n    Input: this nested tuple as a string from user.\n    Output: the sum of the values in the nested tuple as shown above\n    Example:\n    Input: (5, (6, (1, (9, (10, None))))))\n    Output: 9\n    Input: (1, (2, (3, (4, (5, None))))))\n    Output: -1\"\"\"", "entry_point": "new_sum", "canonical_solution":"", "test": "METADATA = {'author': 'ay', 'dataset': 'test'}\n\ndef check(candidate):\n    assert candidate((5, (6, (1, (9, (10, None)))))) == 9\n    assert candidate((1, (2, (3, (4, (5, None)))))) == -1\n    assert candidate((10, (20, (30, (40, (50, None)))))) == -10\n    assert candidate((2, (4, (8, (16, (32, None)))))) == -18"}
