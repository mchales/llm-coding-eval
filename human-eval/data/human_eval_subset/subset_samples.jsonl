{"task_id": "HumanEval/8", "completion": "    if not numbers:\n        return (0, 1)\n    else:\n        sum_total = sum(numbers)\n        product_total = 1\n        for num in numbers:\n            product_total *= num\n        return (sum_total, product_total)"}
{"task_id": "HumanEval/8", "completion": "    if not numbers:\n        return (0, 1)\n    else:\n        sum_numbers = sum(numbers)\n        product_numbers = 1\n        for num in numbers:\n            product_numbers *= num\n        return (sum_numbers, product_numbers)"}
{"task_id": "HumanEval/8", "completion": "    if len(numbers) == 0:\n        return (0, 1)\n    \n    sum_numbers = sum(numbers)\n    product = 1\n    for num in numbers:\n        product *= num\n    \n    return (sum_numbers, product)"}
{"task_id": "HumanEval/8", "completion": "    if len(numbers) == 0:\n        return (0, 1)\n    else:\n        return sum(numbers), reduce(lambda x, y: x*y, numbers)"}
{"task_id": "HumanEval/8", "completion": "    if not numbers:\n        return (0, 1)\n    \n    sum_of_numbers = sum(numbers)\n    product_of_numbers = 1\n    for num in numbers:\n        product_of_numbers *= num\n    \n    return (sum_of_numbers, product_of_numbers)"}
{"task_id": "HumanEval/15", "completion": "    result = \"\"\n    for i in range(n+1):\n        result += str(i) + \" \"\n    return result.strip()"}
{"task_id": "HumanEval/15", "completion": "    result = ''\n    for i in range(n+1):\n        result += str(i) + ' '\n    return result.strip()"}
{"task_id": "HumanEval/15", "completion": "    return ' '.join(str(i) for i in range(n+1))"}
{"task_id": "HumanEval/15", "completion": "    return ' '.join(str(i) for i in range(n+1))"}
{"task_id": "HumanEval/15", "completion": "    seq = \" \".join(map(str, range(n+1)))\n    return seq"}
{"task_id": "HumanEval/41", "completion": "    return n * (n - 1) / 2"}
{"task_id": "HumanEval/41", "completion": "    return n * (n - 1) / 2"}
{"task_id": "HumanEval/41", "completion": "    return n * (n - 1) / 2"}
{"task_id": "HumanEval/41", "completion": "    return n * (n - 1) / 2   # Number of collisions = n choose 2"}
{"task_id": "HumanEval/41", "completion": "    total_collisions = n * (n - 1) // 2\n    return total_collisions"}
{"task_id": "HumanEval/56", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0\n\n# Running the sample test cases\nprint(correct_bracketing(\"<\")) # False\nprint(correct_bracketing(\"<>\")) # True\nprint(correct_bracketing(\"<<><>>\")) # True\nprint(correct_bracketing(\"><<>\")) # False"}
{"task_id": "HumanEval/56", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(\"<\")\n        elif bracket == \">\" and stack:\n            stack.pop()\n        else:\n            return False\n    return len(stack) == 0\n\nprint(correct_bracketing(\"<\"))  # False\nprint(correct_bracketing(\"<>\"))  # True\nprint(correct_bracketing(\"<<><>>\"))  # True\nprint(correct_bracketing(\"><<>\"))  # False"}
{"task_id": "HumanEval/56", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) == 0"}
{"task_id": "HumanEval/56", "completion": "    opening_brackets = 0\n    for bracket in brackets:\n        if bracket == \"<\":\n            opening_brackets += 1\n        elif bracket == \">\":\n            opening_brackets -= 1\n            if opening_brackets < 0:\n                return False\n    return opening_brackets == 0\n\n# Running the given test cases\nprint(correct_bracketing(\"<\")) # False\nprint(correct_bracketing(\"<>\")) # True\nprint(correct_bracketing(\"<<><>>\")) # True\nprint(correct_bracketing(\"><<>\")) # False"}
{"task_id": "HumanEval/56", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    \n    return len(stack) == 0\n\nprint(correct_bracketing(\"<\"))\nprint(correct_bracketing(\"<>\"))\nprint(correct_bracketing(\"<<><>>\"))\nprint(correct_bracketing(\"><<>\"))"}
{"task_id": "HumanEval/71", "completion": "    # Check if the three sides form a valid triangle\n    if a + b > c and a + c > b and b + c > a:\n        # Calculate the semi-perimeter of the triangle\n        s = (a + b + c) / 2\n        # Calculate the area of the triangle using Heron's formula\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        # Round the area to 2 decimal points\n        return round(area, 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/71", "completion": "    # Check if the three sides form a valid triangle\n    if a + b > c and b + c > a and a + c > b:\n        # Calculate the semi-perimeter of the triangle\n        s = (a + b + c) / 2\n        # Calculate the area of the triangle using Heron's formula\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        # Round the area to 2 decimal points\n        return round(area, 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/71", "completion": "    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/71", "completion": "    # Check if the three sides form a valid triangle\n    if a + b > c and a + c > b and b + c > a:\n        # Calculate the semi-perimeter\n        s = (a + b + c) / 2\n        # Calculate the area using Heron's formula\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        # Round the area to 2 decimal points\n        return round(area, 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/71", "completion": "    # Check if the three sides form a valid triangle\n    if a + b > c and a + c > b and b + c > a:\n        # Calculate the semi-perimeter of the triangle\n        s = (a + b + c) / 2\n        # Calculate the area of the triangle using Heron's formula\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        # Round the area to 2 decimal points\n        return round(area, 2)\n    else:\n        return -1"}
